import math
"""
Coordinate System.
The 42 Watts
"""

testX2 = [10]
testY2 = [10]
class robot:
    currentLocationX = 0
    currentLocationY = 0
    currentRobotAngle = 0
    angle = 0
    slope = 0
    distance = 0
    quadrant2 = 0

    def __init__(self,x,y):
        self.currentLocationX = x
        self.currentLocationY = y
        self.angle = 0
        self.slope = 0
        self.distance = 0
        self.quadrant2 = 0

    def addActions(self, speed, robotActions):
        robotActions.append("_turnToAngle(targetAngle=={}, speed={}".format(self.angle, speed))
        robotActions.append("drive(speed={}, distanceInCM = {}, target_angle = {})".format(speed, self.distance, self.angle))

    def goto(self,x2,y2,endAngle,speed):
        self.angle = 0
        self.slope = 0
        self.quadrant2 = 0
        self.distance = 0
        x1 = self.currentLocationX
        y1 = self.currentLocationY
        a1 = self.currentRobotAngle

        def _calculateSlope(x1,y1,x2,y2):
            lineSlope = (y1 - y2)/(x1-x2)
            self.slope = lineSlope

        def _findQuadrant(x1,y1,x2,y2):
            greatestDistance = 0
            xDiff = x1 - x2
            yDiff = y1 - y2
            maxX = 0
            maxY = 0
            minX = 0
            minY = 0
            if abs(xDiff) > abs(yDiff):
                greatestDistance = abs(xDiff)
            if abs(yDiff) > abs(xDiff):
                greatestDistance = abs(yDiff)
            if abs(xDiff) == abs(yDiff):
                greatestDistance = abs(xDiff)
            else:
                print("URGENT: Error in finding quadrants around robot.")

            maxX = x1 + greatestDistance
            minX = x1 - greatestDistance
            maxY = y1 + greatestDistance
            minY = y1 - greatestDistance
            _findEndQuadrant(x1,y1,x2,y2,maxX,maxY,minX,minY)

        def _findEndQuadrant(x1,y1,x2,y2,maxX,maxY,minX,minY):
            endQuadrant = 0
            print(x1,y1,x2,y2,maxX,maxY,minX,minY)
            if x2 >= x1 and x2 <= maxX and y2 >= y1 and y2 <= maxY:
                endQuadrant = 1
            
            if x2 >= minX and x2 <= x1 and y2 >= y1 and y2 <= maxY:
                endQuadrant = 2
            
            if x2 >= minX and x2 <= x1 and y2 >= minY and y2 <= y1:
                endQuadrant = 3
            
            if x2 >= x1 and x2 <= maxX and y2 >= minY and y2 <= y1:
                endQuadrant = 4

            if endQuadrant == 0:
                print("URGENT: Error in finding quadrant of end location")

            self.quadrant2 = endQuadrant
            
        def _calculateAngle(slope):
            lineSlope = slope
            if x1 == 0 and x2 == 0:
                self.angle = 0
            angleRadians = math.atan(lineSlope)
            angleDegrees = math.degrees(angleRadians)
            self.angle = round(angleDegrees)

        def _fixAngle(endQuadrant, rAngle):
            turnAngle = rAngle

            if endQuadrant == 3:
                turnAngle = -1 * rAngle - 90

            if endQuadrant == 4:
                turnAngle = -1 * rAngle + 90

            self.angle = round(turnAngle)

        def _findDistance(x1,y1,x2,y2):
            distanceToDrive = math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2))
            self.distance = round(distanceToDrive)

        def _move(speed):
            _turnToAngle(targetAngle = self.angle, speed = speed)
            drive(speed = speed, distanceInCM = self.distance, target_angle = self.angle)

        _findQuadrant(x1,y1,x2,y2)
        _calculateSlope(x1,y1,x2,y2)
        _calculateAngle(self.slope)
        _fixAngle(self.quadrant2, self.angle)
        _findDistance(x1,y1,x2,y2)
        #_move(speed)
        print(str(self.angle))
        print(str(self.distance))
        self.currentLocationX = x2
        self.currentLocationY = y2
        #_turnToAngle(targetAngle = endAngle, speed = speed)
    
def testCoordinateSystem():
    for index in range(len(testX2)):
        robotTest = robot(0,0)
        robotTest.goto(testX2[index], testY2[index], 0, 10)
        actions = []
        robotTest.addActions(speed=30, robotActions=actions)

testCoordinateSystem()